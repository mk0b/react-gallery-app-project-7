{"version":3,"sources":["config.js","components/SearchBar.js","components/CategoriesNav.js","components/Photo.js","components/NoSearchResults.js","components/Gallery.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["apiInfo","key","secret","SearchBar","state","searchContent","onSearchChange","event","setState","target","value","onSubmit","preventDefault","searchText","search","path","props","history","push","onSearch","currentTarget","reset","className","this","bind","type","onChange","name","placeholder","ref","input","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","CategoriesNav","to","onClick","fetchData","Photo","src","url","alt","NoSearchResults","Gallery","routeName","location","pathname","replace","photos","results","data","title","query","charAt","toUpperCase","slice","length","map","photo","farm","server","id","loading","NotFound","App","apiSearchCall","axios","get","then","response","queryContent","catch","error","console","log","exact","render","component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18b8ea9c.chunk.js","sourcesContent":["//storing Flickr API key for this project.\r\n\r\nconst apiInfo = {\r\n    key: 'b1dd25626fe9946ed7154d637074f7e0',\r\n    secret: 'a95f02e5293839ca'\r\n};\r\n\r\nexport default apiInfo;","//stateful class component\r\nimport React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass SearchBar extends Component {\r\n\r\n    //setting state\r\n    state = {\r\n        searchContent: ''\r\n    }\r\n\r\n    //method for updating the searchContent state when someone types.\r\n    onSearchChange = event => {\r\n        this.setState({ searchContent: event.target.value });\r\n    }\r\n    \r\n    //method for what to do on submit\r\n    //basically grab the search value create a route path with it\r\n    //push that route to be the current route\r\n    onSubmit = event => {\r\n        event.preventDefault();\r\n        let searchText = this.search.value;\r\n        let path = `/search/${searchText}`;\r\n        this.props.history.push(path);\r\n        this.props.onSearch(this.state.searchContent);\r\n        event.currentTarget.reset();\r\n    }\r\n\r\n    //had to bind this for my setup to work.\r\n    render() {\r\n        return (\r\n            <form className=\"search-form\" onSubmit={this.onSubmit.bind(this)}>\r\n                <input type=\"search\"\r\n                    onChange={this.onSearchChange} \r\n                    name=\"search\" \r\n                    placeholder=\"Search\" \r\n                    ref={ (input) => this.search =  input}\r\n                    required />\r\n                <button type=\"submit\" className=\"search-button\">\r\n                    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    </svg>\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter (SearchBar);","//functional component\r\nimport React from 'react';\r\nimport { NavLink, BrowserRouter } from 'react-router-dom';\r\n\r\nconst CategoriesNav = (props) => (\r\n            <BrowserRouter>\r\n                <nav className=\"main-nav\">\r\n                    <ul>\r\n                        <li><NavLink to=\"/horses\" onClick={() => props.fetchData('horses')}>#horses</NavLink></li>\r\n                        <li><NavLink to=\"/cats\" onClick={() => props.fetchData('cats')}>#cats</NavLink></li>\r\n                        <li><NavLink to=\"/dogs\" onClick={() => props.fetchData('dogs')}>#dogs</NavLink></li>\r\n                    </ul>\r\n                </nav>\r\n            </BrowserRouter>\r\n        );\r\n\r\nexport default CategoriesNav;","//functional component\r\nimport React from 'react';\r\n\r\nconst Photo = (props) => (\r\n    <li>\r\n        <img src={props.url} alt=\"\" />\r\n    </li>\r\n);\r\n\r\nexport default Photo;","//functional component\r\nimport React from 'react';\r\n\r\nconst NoSearchResults = () => (\r\n    <div className=\"no-results\">\r\n        <h1>No results found.</h1>\r\n        <p>There are no results for that search, please try a different word or phrase.</p>\r\n    </div>\r\n);\r\n\r\nexport default NoSearchResults;","//functional component\r\nimport React, { Component, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Photo from './Photo';\r\nimport NoSearchResults from './NoSearchResults';\r\n\r\n//construct URLs for the Photo Source URLs from the data we get back: https://www.flickr.com/services/api/misc.urls.html\r\n//display the URL's to the <Photo /> component or if the array is empty display no results found.\r\n\r\nclass Gallery extends Component {\r\n\r\n    componentDidMount() {\r\n        let routeName = this.props.location.pathname.replace('/', '');\r\n        this.props.fetchData(routeName);\r\n    }\r\n\r\n    render() {\r\n        //store vairables\r\n        const results = this.props.data;\r\n        let photos;\r\n        //grab the search query and then make it look prettier for the page\r\n        const title = this.props.query.charAt(0).toUpperCase() + this.props.query.slice(1);\r\n        \r\n        //if no results show the NoSearchResults component.\r\n        if (results.length > 0) {\r\n            photos = results.map(photo => {\r\n                const url = `https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}_c.jpg`;\r\n                return (\r\n                    <Photo url={url} key={photo.id} />\r\n                );\r\n            });\r\n        } else {\r\n            photos = <NoSearchResults />\r\n        }\r\n\r\n        //show loading when loading otherwise show the photos. Loading happens quickly though, tough to see.\r\n        return (\r\n            <div className=\"photo-container\">\r\n                {\r\n                    (this.props.loading)\r\n                    ? <p className=\"loading\">Loading...</p>\r\n                    :                \r\n                    <Fragment>\r\n                        <h1 className=\"gallery-h1\">  {title} </h1>\r\n                        <hr className=\"gallery-line\" />\r\n                        <ul>\r\n                            {photos}\r\n                        </ul>\r\n                    </Fragment>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Gallery);","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n    <h1>404 - This page does not exist.</h1>\r\n);\r\n\r\nexport default NotFound;","//stateful class component\nimport React, { Component } from 'react';\nimport '../css/index.css';\nimport axios from 'axios';\nimport apiInfo from '../config';\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\n\n//importing components\nimport SearchBar from './SearchBar';\nimport CategoriesNav from './CategoriesNav';\nimport Gallery from './Gallery';\nimport NotFound from './NotFound';\n\nexport default class App extends Component {\n  \n  constructor(props) {\n    //binding this keyword to this class\n    super(props);\n    //setting state to make a place for the Flickr data to go\n    this.state = {\n      photos: [],\n      queryContent: '',\n      loading: true\n    }\n  }\n\n  //method to search the Flickr API from the search form in SearchBar.js\n  //creating it as an arrow function to auto bind this keyword.\n  search = (query) => {\n    //storing the call in a variable to make it cleaner\n    const apiSearchCall = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiInfo.key}&tags=${query}&per_page=24&format=json&nojsoncallback=1`;\n\n    //api call\n    axios.get(apiSearchCall)\n      .then(response => {\n        this.setState({\n          photos: response.data.photos.photo,\n          queryContent: query,\n          loading: false\n        });\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data: ', error);\n      });\n\n    //resetting loading to true so that loading... shows on any API call load.\n    this.setState({loading: true});\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"container\">\n          <SearchBar onSearch={this.search} loading={this.state.loading} />\n          <CategoriesNav fetchData={this.search} />\n          <Switch>\n            <Route exact path=\"/\" render={ () => <Redirect to=\"/horses\" />} />\n            <Route exact path=\"/search/:searchtext\" render={ (props) => <Gallery {...props} data={this.state.photos} query={this.state.queryContent} loading={this.state.loading} fetchData={this.search} />} />\n            <Route path=\"/(horses|cats|dogs)\" render={ (props) => <Gallery {...props} data={this.state.photos} query={this.state.queryContent} loading={this.state.loading} fetchData={this.search} />} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}